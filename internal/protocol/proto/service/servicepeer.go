// Code generated by protoc-gen-stream-rpc. DO NOT EDIT.
package service

import (
	"context"

	proto "github.com/jibuji/p2p-service-discover/internal/protocol/proto"
	interfaces "github.com/jibuji/p2p-service-discover/pkg/discovery/interfaces"
	"github.com/jibuji/p2p-service-discover/pkg/types"
)

// ServicePeerService implements the ServicePeer service
type ServicePeerService struct {
	proto.UnimplementedServicePeerServer
	node interfaces.ServiceDiscovery
}

func NewServicePeerService(node interfaces.ServiceDiscovery) *ServicePeerService {
	return &ServicePeerService{node: node}
}

func (s *ServicePeerService) FetchPeerList(ctx context.Context, req *proto.PeerListRequest) *proto.PeerListResponse {
	// Get peers
	peers, err := s.node.FindPeers(req.ServiceTopic)
	if err != nil {
		return nil
	}
	
	// Create response
	return &proto.PeerListResponse{
		ServiceTopic: req.ServiceTopic,
		Page:         req.Page,
		RequestId:    req.RequestId,
		Peers:        s.convertPeers(peers),
	}
}

func (s *ServicePeerService) CheckService(ctx context.Context, req *proto.ServiceCheckRequest) *proto.ServiceCheckResponse {
	// Check if service is provided
	peers, err := s.node.FindPeers(req.ServiceTopic)
	if err != nil {
		return nil
	}

	// Create response
	return &proto.ServiceCheckResponse{
		ServiceTopic:    req.ServiceTopic,
		ProvidesService: len(peers) > 0,
		RequestId:       req.RequestId,
	}
}

func (s *ServicePeerService) convertPeers(peers []types.PeerInfo) []*proto.PeerInfo {
	result := make([]*proto.PeerInfo, 0, len(peers))
	for _, p := range peers {
		result = append(result, &proto.PeerInfo{
			PeerId:   []byte(p.ID),
			LastSeen: p.LastSeen.UnixNano(),
			Addresses: p.Addrs,
		})
	}
	return result
}
